'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _webpackSources = require('webpack-sources');

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Webpack File Preprocessor Plugin
 */
var WebpackFilePreprocessorPlugin = function () {
    function WebpackFilePreprocessorPlugin(options) {
        _classCallCheck(this, WebpackFilePreprocessorPlugin);

        this.options = Object.assign({
            debug: false
        }, options);
    }

    _createClass(WebpackFilePreprocessorPlugin, [{
        key: 'apply',
        value: function apply(compiler) {
            var options = this.options;

            if (!(0, _util.validateOptions)(options)) {
                console.warn('WARNING WebpackFilePreprocessorPlugin instantiated with invalid options.');

                return;
            }

            compiler.plugin('emit', function (compilation, callback) {
                if (options.debug === true) {
                    console.info('Preprocessing Assets:\n');
                }

                // Loop through the compilation assets
                (0, _util.forEach)(compilation.assets, function (asset, filename) {
                    if (!options.pattern.test(filename)) {
                        return;
                    }

                    var processed = options.process(asset.source(), filename); // Trigger the process callback
                    var size = asset.size();
                    var processedSize = processed.length;
                    var ratio = Number(100 - processedSize * 100 / size).toPrecision(3);

                    if (options.debug === true) {
                        console.info(' - ' + filename + ' \t\t' + size + 'B -> ' + processedSize + 'B\t\t[' + ratio + ' %]');
                    }

                    // Replace the source file with minified html
                    compilation.assets[filename] = new _webpackSources.RawSource(processed);
                });

                if (options.debug === true) {
                    console.info('\n');
                }

                callback();
            });
        }
    }]);

    return WebpackFilePreprocessorPlugin;
}();

exports.default = WebpackFilePreprocessorPlugin;